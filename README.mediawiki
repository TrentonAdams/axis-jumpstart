= Building and Deploying =
The only requirement to build and deploy this example is that 
* you have jmx installed into your repository; maven will tell you how, if the build fails because it's missing
* you have a "localhost" server configured with username/password that match your tomcat manager.
* you have tomcat running on port localhost:8080

To build, just run the standard command...
 mvn install tomcat:deploy

= Development URLs =
Some administrative urls...
* [http://localhost:8080/wsapp/]
* [http://localhost:8080/wsapp/services/listServices]
* [http://localhost:8080/wsapp/services/Countries?wsdl]
* [http://localhost:8080/wsapp/services/Cities?wsdl]
* [http://localhost:8080/wsapp/axis2-admin/]
* [http://localhost:8080/wsapp/SOAPMonitor]

Default user/pass is admin/axis2 for the admin tool

All of the urls above except the wsdl urls, do not work when deployed to
production.  The "production" profile excludes them so that we don't add
unneeded code to production.

= REST URLs =
I have not tried the SOAP versions, though I'm sure they work fine, but
here are the REST versions...
* [http://localhost:8080/wsapp/services/Countries/testError?errorTest=blah-invalid-value]
* [http://localhost:8080/wsapp/services/Countries/getCountries]
* [http://localhost:8080/wsapp/services/Countries/searchCountries?pattern=(?i).*ana.*]
* [http://localhost:8080/wsapp/services/Cities/getCities]
* [http://localhost:8080/wsapp/services/Cities/searchCities?pattern=(?i).*mon.*]

= Creating Clients =
The update-client.sh script is an example on how to create a client JAR for
SOAP based requests to your service.  This JAR is generated from the WSDL,
using Axis' wsdl2java.sh.

= Understanding the Example =
This should be filled in soon.  But the basics are...
* wsapp - depends on the axis2 war, and sucks in the ws1 and ws2 as dependencies, automatically deploying them as web services
* ws1 - an example web service with a list of cities that can be retrieved or searched on
* ws2 - an example web service with a list of countries that can be retrieved or searched on, as well as show an example of what happens when an exception is thrown.
* Both ws1 and ws2 build as any other Java JAR, and in addition they...
** build an AAR with axis2-aar-maven-plugin
** attach the AAR, such as when deploying to repos or doing releases, by default with the build-helper-maven-plugin
** provide a proper services.xml
** provide the Java POJO classes to run as web services
* wsapp pulls in both jar and aar classifier types as dependencies.  Only the AAR is needed, but including a JAR allows IDEs to auto complete in things like configuration files and what not.
